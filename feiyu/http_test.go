package feiyu

import (
	"testing"
	"encoding/json"
)

var feiyuTest *FYAPI

func feiyuInit() {
	cfg := &FeiyuConfig{
	}
	fy, err := NewFeiyuApi(cfg)
	if err != nil {
		panic(err)
	}
	feiyuTest = fy
}

func TestFeiyu(t *testing.T) {
}

func TestParse(t *testing.T) {
	str := `
	{
		"result": {
			"addDate": "2015-03-17 14:06:19",
			"fyAccountId": "123123",
			"fyAccountPwd": "1223456",
			"status": 1
		},
		"resultCode": "0",
		"resultMsg": "创建账户成功"
	}`

	resp := []byte(str)
	a, err := ParseAddAccountResult(resp)
	t.Logf("err -> %v", err)
	t.Logf("a -> %#v", a)
}

func TestOnline(t *testing.T) {
	str := `
	{
		"result": [
		{
			"clientIp": "10.2.3.4",
			"fyAccountId": "11111",
			"onlineTime": 1431669626844
		},
		{
			"clientIp": "13.2.3.2",
			"fyAccountId": "22222",
			"onlineTime": 1431669626844
		}
		],
		"resultCode": "0",
		"resultMsg": "请求成功"
	}`
	resp := []byte(str)
	a, err := ParseOnlineStatusResult(resp)
	t.Logf("err -> %v", err)
	t.Logf("a -> %#v", a)
}

func TestResp(t *testing.T) {
	resp := CallAuthResponse{}
	resp.ResultCode = "0"
	resp.ResultMsg = "审核成功"
	resp.Result = CallAuthResp{
		AppCallId: "xxkdg",
		AppServerExtraData: "test",
		IfRecord: 2,
		MaxCallMinute: 120,
		MaxMember: 4,
	}
	a, err := EncodeCallAuth(resp)
	t.Logf("err -> %v", err)
	t.Logf("a -> %#v", string(a))
}

func TestAddAccount(t *testing.T) {
	cfg := NewFeiyuConfig()
	fy, err := NewFeiyuApi(cfg)
	if err != nil {
		t.Log(err)
	}
	var info string = "FY44139IJNESM"
	var infoType string = "1"
	r1, err := fy.GetAccount(infoType, info)
	t.Logf("err -> %v", err)
	t.Logf("r1 -> %#v", r1)
	//
	//var userid string = "16001"
	//r2, err := fy.AddAccount(userid, "")
	//t.Logf("err -> %v", err)
	//t.Logf("r2 -> %#v", r2)
	//
	var info3 string = "16016"
	var infoType3 string = "2"
	r3, err := fy.GetAccount(infoType3, info3)
	t.Logf("err -> %v", err)
	t.Logf("r3 -> %#v", r3)
	t.Logf("r3 -> %#v", r3.Result.FyAccountId)
	//
	r4 := fy.HangUp("FYC841FVXA5AD", "FY_CONFERENCEID_93277FYPDF2EE87B8B2A", "2")
	t.Logf("r4 -> %#v", r4)
}

func TestCallAuth(t *testing.T) {
	b := []byte{0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x26, 0x61, 0x70, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x31, 0x31, 0x35, 0x39, 0x35, 0x36,
	0x30, 0x26, 0x61, 0x70, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x3d, 0x26, 0x61, 0x70, 0x70, 0x49, 0x64, 0x3d,
	0x43, 0x38, 0x34, 0x31, 0x46, 0x42, 0x33, 0x31, 0x36, 0x42, 0x39, 0x32, 0x32, 0x45, 0x45, 0x36, 0x44, 0x35, 0x35, 0x35, 0x37, 0x32,
	0x46, 0x39, 0x46, 0x43, 0x41, 0x46, 0x34, 0x37, 0x33, 0x35, 0x26, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x35, 0x26,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x3d, 0x79, 0x63, 0x30, 0x31, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x3d, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x49, 0x44, 0x5f,
	0x39, 0x33, 0x32, 0x37, 0x37, 0x46, 0x59, 0x50, 0x45, 0x46, 0x34, 0x35, 0x38, 0x46, 0x39, 0x45, 0x33, 0x42, 0x34, 0x36, 0x26, 0x66,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x46, 0x59, 0x43, 0x38, 0x34, 0x31, 0x46, 0x53, 0x53, 0x49, 0x54,
	0x4e, 0x42, 0x26, 0x66, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x3d, 0x32, 0x35, 0x37, 0x38, 0x45, 0x31, 0x32, 0x36, 0x44, 0x38,
	0x33, 0x36, 0x39, 0x36, 0x39, 0x39, 0x36, 0x34, 0x42, 0x39, 0x33, 0x36, 0x33, 0x39, 0x33, 0x32, 0x37, 0x37, 0x46, 0x59, 0x50, 0x35,
	0x25, 0x34, 0x30, 0x66, 0x79, 0x26, 0x69, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3d, 0x32, 0x26, 0x74, 0x69, 0x3d, 0x31, 0x34,
	0x39, 0x30, 0x32, 0x36, 0x34, 0x39, 0x37, 0x32, 0x32, 0x35, 0x36, 0x26, 0x61, 0x75, 0x3d, 0x32, 0x30, 0x43, 0x37, 0x44, 0x30, 0x37,
	0x33, 0x31, 0x43, 0x36, 0x31, 0x31, 0x46, 0x46, 0x32, 0x45, 0x34, 0x33, 0x32, 0x38, 0x44, 0x34, 0x38, 0x31, 0x31, 0x34, 0x38, 0x44,
	0x32, 0x38, 0x34}
	t.Log(string(b))
	r, err := ParseCallAuth(b)
	t.Logf("err -> %v", err)
	t.Logf("r -> %#v", r)
	//
	s := `action=createConference&
	appAccountId=1159560&
	appExtraData=&
	appId=C841FB316B922EE6D55572F9FCAF4735&
	callType=5&
	channelId=yc01&
	conferenceId=FY_CONFERENCEID_93277FYPEF458F9E3B46&
	fyAccountId=FYC841FSSITNB&
	fyCallId=2578E126D836969964B936393277FYP5%40fy&
	ifRecord=2&
	ti=1490264972256&
	au=20C7D0731C611FF2E4328D481148D284`
	r2, err := ParseCallAuth([]byte(s))
	t.Logf("err -> %v", err)
	t.Logf("r2 -> %#v", r2)
	//
	r3 := CallAuthResult{
		Action: "createConference",
		AppAccountId: "1159560",
		AppExtraData: "",
		AppId: "C841FB316B922EE6D55572F9FCAF4735",
		CallType: 5,
		ChannelId: "yc01",
		ConferenceId: "FY_CONFERENCEID_93277FYPEF458F9E3B46",
		FyAccountId: "FYC841FSSITNB",
		FyCallId: "2578E126D836969964B936393277FYP5%40fy",
		IfRecord: 2,
		Ti: 1490264972256,
		Au: "20C7D0731C611FF2E4328D481148D284",
	}
	b3, err := json.Marshal(&r3)
	t.Logf("err -> %v", err)
	t.Log(string(b3))
	t.Log(string(b3) == string(b))
	//
	b4, err := ParseCallAuthStr(b)
	t.Logf("err -> %v", err)
	t.Logf("b4 -> %v", b4)
}
